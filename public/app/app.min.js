/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

const togglePlayButton = __webpack_require__(3);

function countdownListener(container, state) {
  container.addEventListener('click', event => {
    event.preventDefault();

    if(container.querySelector('.glyphicon-play')) {
      state.settings.work = document.getElementById('countdown-work')
        .value*60;
      state.settings.break = document.getElementById('countdown-break')
        .value*60;
      startTimerHelper(state);
    }

    else if (container.querySelector('.glyphicon-stop')) {
      state.timer.stop();
      togglePlayButton(container);
    }
  });
}

function ringBell() {
  const alarm = new Audio('audio/alarm_edit.mp3');
  alarm.play();
  this.stop();
  togglePlayButton(this.container);
}

function startTimerHelper(state) {
  state.timer.start(state.settings.work*1e3, function() {
    ringBell.call(this);
    state.currentSession.end = new Date();
    $('#feedback-modal').modal('show');
  });
  state.currentSession.start = new Date();
  togglePlayButton(state.timer.container);
}
module.exports = {countdownListener, ringBell, startTimerHelper};


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

const {drawTimeline, populateTable} = __webpack_require__(10);


function timelineListener(timeline, state) {

  timeline.addEventListener('click', event => {
    event.preventDefault();
    setTimeout(function() {
      timelineHelper(state, document.getElementById('timeline-container'));
    }, 10)
  });
  window.onresize = function() {
    timelineHelper(state, document.getElementById('timeline-container'));
  };
}

function timelineHelper(state, container) {
  google.charts
    .load('current', {'packages':['timeline']});
  const data = populateTable(state);
  google.charts.setOnLoadCallback(
    function() {
      drawTimeline(data, container);
  });
  if(!data.length) {
    document.getElementById('empty-timeline').classList.remove('hide');
  }
  else {
    document.getElementById('empty-timeline').classList.add('hide');
  }
}
module.exports = {timelineListener, timelineHelper};


/***/ }),
/* 2 */
/***/ (function(module, exports) {

function pageDisplay(page) {
  ['timer-page', 'settings-page', 'timeline-page'].forEach(element => {
    document.getElementById(element).classList.add('hide');
  });
  document.getElementById(page).classList.remove('hide');
}

function controlDisplay(control) {
  ['timer-button', 'settings-button', 'timeline-button'].forEach(element => {
    document.getElementById(element).classList.remove('hide');
  });
  control.classList.add('hide');
}

module.exports = {pageDisplay, controlDisplay};


/***/ }),
/* 3 */
/***/ (function(module, exports) {

function togglePlayButton(wrapperElement) {
  let playButton = wrapperElement.querySelector('.glyphicon');
  playButton.classList.toggle('glyphicon-play');
  playButton.classList.toggle('glyphicon-stop');
}

module.exports = togglePlayButton;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

const togglePlayButton = __webpack_require__(3);
const ringBell = __webpack_require__(0).ringBell;
const startTimerHelper = __webpack_require__(0).startTimerHelper;
const timelineHelper = __webpack_require__(1).timelineHelper;

function modalListener(form, state) {
  const note = document.getElementById('modal-note');

  form.addEventListener('click', event => {
    console.log(event.target);
    console.log(event.target.tagName);
    if(event.target.classList.contains('mood-feedback')) {
      state.currentSession.mood = event.target.getAttribute('data-mood');
      note.classList.remove('hidden');
    }
  });

  form.addEventListener('submit', event => {
    event.preventDefault();
    console.log("form: ", state.currentSession);
    const currentSession = Object.assign({}, state.currentSession);
    state.history.push(currentSession);
    $.ajax('../me', {
      method: 'PUT',
      data: {
        username: state.username,
        id: state.cookie.val,
        history: state.history
      }
    })
    .then(() => {
      $('#feedback-modal').modal('hide');
      timelineHelper(state, document.getElementById('timeline-container'));
    });
  });


  $('#feedback-modal').on('hidden.bs.modal', event => {
    event.preventDefault();
    const wrapperElement = document.getElementById('timer-module');
    note.classList.add('hidden');
    togglePlayButton(wrapperElement);
    state.timer.start(state.settings.break*1e3, function() {
      ringBell.call(this);
      $('#resume-modal').modal('show');
    });
  });

}
function resumeModalListener(modal, state) {
  modal
    .querySelector('.modal-button')
    .addEventListener('click', event => {
      const wrapperElement = document.getElementById('timer-module');
      togglePlayButton(wrapperElement);
      $('#resume-modal').modal('hide');
      console.log(state);
      startTimerHelper(state);
    })
};
module.exports = {modalListener, resumeModalListener};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

const {pageDisplay, controlDisplay} = __webpack_require__(2);

function navListener(navGroup, state) {
  navGroup.addEventListener('click', event => {
    // event.preventDefault();
    if (event.target.dataset.page) {
    pageDisplay(event.target.dataset.page);
    controlDisplay(event.target);
    }
  });
}

module.exports = navListener;


/***/ }),
/* 6 */
/***/ (function(module, exports) {

function settingsListener(settings, state) {
  settings.addEventListener('click', event => {
    event.target.textContent = 'Saving...';
    event.target.setAttribute('disabled','disabled');

    state.settings.work = document.getElementById('default-work').value;
    state.settings.break = document.getElementById('default-break').value;
    console.log(`Work ${state.settings.work}`);
    console.log(`Break ${state.settings.break}`);
    document.getElementById('countdown-work').setAttribute('value', state.settings.work);
    document.getElementById('countdown-break').setAttribute('value', state.settings.break);

    $.ajax({
      method: 'PUT',
      url: '../me',
      data : {
        id: state.cookie.val,
        username: state.username,
        settings: {
          work: state.settings.work,
          break: state.settings.break,
        }
      }
    })
    .then(data => event.target.textContent = 'Saved');
  });
}

module.exports = settingsListener;


/***/ }),
/* 7 */
/***/ (function(module, exports) {

function parseCookieString(cookieString, state) {
  console.log(cookieString);
  if (typeof cookieString === 'string') {
    if (cookieString.length > 0) {
      cookieString.split(';').forEach(pair => {
        let items = pair.split('=');
        if(items[0] === 'pomodoro') {
          state.cookie = {
            name: items[0],
            val: items[1]
          };
        }
      });
    }
  }
}

module.exports = parseCookieString;


/***/ }),
/* 8 */
/***/ (function(module, exports) {

class Timer {
  constructor(container, settings) {

    container.setAttribute('style', `height: ${container.offsetWidth}px`);

    window.addEventListener('resize', event => {
      if(container.offsetWidth > 0) {
      container.setAttribute('style', `height: ${container.offsetWidth}px`)
      console.log(container.offsetWidth);
      }
    });

    this.container = container;
    container.innerHTML =
      `<div class="spinner-left timer"></div>
        <div class="spinner-right timer"></div>
        <div class="hide-left timer"></div>
        <div class="hide-right timer"></div>
        <div class="timer timer-button">
          <button class="glyphicon glyphicon-play" type="button"></button>
        </div>
      `;

    this.container.querySelector('.glyphicon')
      .onfocus = function() {
        this.blur();
      }
    this.settings = settings || {
      duration: 1e3,
      interval: 100
    };

    this.counter = {
      count: 0,
      epoch: null
    };

    this.callback = null;
    this.anim = {};
  }

  start(duration, callback) {
    this.settings.duration = duration || this.settings.duration;
    this.counter.count = 0;
    this.callback = callback;
    this.counter.epoch = performance.now();
    this.draw();
  }

  stop() {
    clearTimeout(this.timeoutId);
    this.anim.spinnerLeft.pause();
    for (let animation in this.anim) {
      this.anim[animation].pause();
    }
  }


  draw() {
    this.anim.spinnerLeft = this.container.querySelector('.spinner-left')
      .animate([
        {transform: 'rotate(0)'},
        {transform: 'rotate(180deg)'}
      ], {
        duration: this.settings.duration/2,
        endDelay: this.settings.duration/2,
        fill: 'forwards'
      });

    this.anim.spinnerRight = this.container.querySelector('.spinner-right')
      .animate([
        {transform: 'rotate(0deg)'},
        {transform: 'rotate(180deg)'}
      ], {
        duration: this.settings.duration/2,
        delay: this.settings.duration/2
      });
    this.anim.rightOpa = this.container.querySelector('.spinner-right')
      .animate([
        {opacity: 0},
        {opacity: 1, offset: 0.5},
        {opacity: 1}
      ], {
        duration: this.settings.duration,
        easing: 'steps(2)'
      })
    this.anim.rightOpa.onfinish = () => {
      this.anim.spinnerLeft.cancel();
      this.callback.call(this);
    }
  }
}

module.exports = function(container, settings) {
  return new Timer(container, settings);
};


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

const {countdownListener, ringBell} = __webpack_require__(0);
const timer = __webpack_require__(8);
const {modalListener, resumeModalListener} = __webpack_require__(4);
const parseCookieString = __webpack_require__(7);
const {pageDisplay} = __webpack_require__(2);
const navListener = __webpack_require__(5);
const settingsListener = __webpack_require__(6);
const {timelineListener, timelineHelper} = __webpack_require__(1);

let state = {
  username: null,
  settings: {
    work: 25,
    break: 5,
  },
  cookie: {
    name: null,
    val: null
  },
  history: [],
  currentSession: {
    start: null,
    end: null,
    mood: null
  },
  timer: timer(document.getElementById('timer-module'), {duration: 1e3, interval: 100}),
};

const cookies = document.cookie;
state.username = window.location.search.slice(1);
parseCookieString(cookies, state);

$.ajax({
  method: 'GET',
  url: `../me`,
  data: {
    username: state.username,
    id: state.cookie.val
  }
})
.then(data => {
  state.settings = data.settings;
  state.history = data.history;
  let buttonLink = document.getElementById('account-interface').querySelector('a');
  buttonLink.classList.add('hide');
  buttonLink.nextElementSibling.textContent = 'Logout';
  let settingsButton = document.getElementById('settings-button');
  settingsButton.classList.remove('hide');
  document.getElementById('timeline-button').classList.remove('hide');

  document.getElementById('countdown-work').setAttribute('value', state.settings.work);
  document.getElementById('countdown-break').setAttribute('value', state.settings.break);
});

let navControls = document.getElementById('nav-controls');
navListener(navControls, state);


let stopwatch = document.getElementById('timer-module');
countdownListener(stopwatch, state);


let modalSubmit = document.getElementById('modal-submit');
modalListener(modalSubmit, state);

resumeModalListener(document.getElementById('resume-modal'), state);

let settings = document.getElementById('settings-save-button');
settingsListener(settings, state);


let timeline = document.getElementById('timeline-button');
timelineListener(timeline, state);

document.getElementById('timer-button')
  .addEventListener('click', event => {
    setTimeout(function() {
      const container = document.getElementById('timer-module');
      container.setAttribute('style', `height: ${container.offsetWidth}px`)
    }, 10)
  })


/***/ }),
/* 10 */
/***/ (function(module, exports) {

function populateTable(state) {
  let recentDates = [];
  const now = new Date();
  now.setDate(now.getDate() - now.getDay());
  now.setHours(0, 0 ,0);
  const beginMs = now.valueOf();

  now.setDate(now.getDate() + 6);
  now.setHours(23, 59, 59);
  const endMs = now.valueOf();

  state.history.forEach(session => {
    let start = new Date(session.start);
    let end = new Date(session.end);
    if (start.valueOf() > beginMs && end.valueOf() < endMs) {
      recentDates.push([
        {0: 'Sunday', 1: 'Monday', 2: 'Tuesday', 3: 'Wednesday',
        4: 'Thursday', 5: 'Friday', 6: 'Saturday'}[start.getDay()],
        session.mood,
        new Date(0, 0, 0, start.getHours(), start.getMinutes(), start.getSeconds()),
        new Date(0, 0, 0, end.getHours(), end.getMinutes(), end.getSeconds()),
      ]);
    }
  });
  return recentDates;
}


function drawTimeline(dates, container) {
  if(dates.length) {
    google.charts
      .load('current', {'packages':['timeline']});
    const chart = new google.visualization.Timeline(container);
    const table = new google.visualization.DataTable();
    table.addColumn({type: 'string', id: 'Day'});
    table.addColumn({type: 'string', id: 'Mood'});
    table.addColumn({type:'date', id: 'Start'});
    table.addColumn({type: 'date', id: 'End'});
    table.addRows(dates);

    chart.draw(table, {
      width: container.parentNode.offsetWidth,
      height: container.parentNode.offsetHeight,
      hAxis: {
        viewWindow: {
          min: new Date(0, 0, 0, 0, 0, 0),
          max: new Date(0, 0, 0, 23, 59, 59)
        },
        format: 'h:m aa'
      }
    });
  }
}

module.exports = {drawTimeline, populateTable};


/***/ })
/******/ ]);